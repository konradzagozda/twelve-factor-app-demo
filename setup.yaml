- name: Check dependencies
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Check for required dependencies
      command: "{{ item.cmd }}"
      register: result
      failed_when: result.rc != 0
      changed_when: false
      loop:
        - { cmd: "docker --version", name: "Docker" }
        - { cmd: "poetry --version", name: "Poetry" }
        - { cmd: "git --version", name: "Git" }
        - { cmd: "pyenv --version", name: "Pyenv" }
        - { cmd: "kind version", name: "Kind" }
      loop_control:
        label: "{{ item.name }}"

- name: Setup Development Environment
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure python env with Poetry
      command: poetry env use 3.11
      register: poetry_env_output
      args:
        chdir: todo-api
      changed_when: "'Creating virtualenv' in poetry_env_output.stderr"

    - name: Install dependencies with Poetry
      command: poetry install
      args:
        chdir: todo-api
      register: poetry_install_output
      changed_when: >
        "No dependencies to install or update" not in poetry_install_output.stdout

    - name: Add poetry-plugin-export
      command: poetry self add poetry-plugin-export
      args:
        chdir: todo-api
      register: poetry_plugin_add_output
      changed_when: >
        "Nothing to add." not in poetry_plugin_add_output.stdout

    - name: Export requirements.txt from lock
      shell: |
        poetry export -f requirements.txt --output src/requirements.txt.tmp && \
        if ! cmp --silent src/requirements.txt.tmp src/requirements.txt; then
          mv src/requirements.txt.tmp src/requirements.txt
          echo "requirements.txt has changed"
        else
          rm src/requirements.txt.tmp
          echo "No changes in requirements.txt"
        fi
      args:
        chdir: todo-api
      register: poetry_export_output
      changed_when: "'requirements.txt has changed' in poetry_export_output.stdout"

    - name: Export requirements.dev.txt from lock
      shell: |
        poetry export -f requirements.txt --output tests/requirements.dev.txt.tmp --only dev && \
        if ! cmp --silent tests/requirements.dev.txt.tmp tests/requirements.dev.txt; then
          mv tests/requirements.dev.txt.tmp tests/requirements.dev.txt
          echo "requirements.dev.txt has changed"
        else
          rm tests/requirements.dev.txt.tmp
          echo "No changes in requirements.dev.txt"
        fi
      args:
        chdir: todo-api
      register: poetry_export_output
      changed_when: "'requirements.dev.txt has changed' in poetry_export_output.stdout"

    - name: Activate pre-commit
      shell: |
        if [ -f .git/hooks/pre-commit ]; then
          cp .git/hooks/pre-commit .git/hooks/pre-commit.bak
        else
          touch .git/hooks/pre-commit.bak # Ensure backup exists for comparison
        fi

        poetry -C todo-api run pre-commit install

        if cmp --silent .git/hooks/pre-commit .git/hooks/pre-commit.bak; then
          CHANGED="No changes in pre-commit hook"
          STATUS=0
        else
          CHANGED="pre-commit hook has changed"
          STATUS=1
        fi

        rm .git/hooks/pre-commit.bak

        # Output result
        echo $CHANGED
        exit $STATUS
      register: pre_commit_install_output
      changed_when: pre_commit_install_output.rc == 1
      failed_when: pre_commit_install_output.rc not in [0,1]
      ignore_errors: false

    - name: Get Python interpreter path
      shell: poetry env info -p
      args:
        chdir: todo-api
      register: poetry_env_path
      changed_when: false

    - name: Set Python interpreter as a fact
      set_fact:
        ansible_python_interpreter: "{{ poetry_env_path.stdout }}/bin/python"

- name: Create kuberenetes resources
  hosts: localhost
  gather_facts: no
  vars:
    ansible_python_interpreter: "{{ hostvars['localhost']['ansible_python_interpreter'] }}"
  tasks:
    - name: Start kubernetes cluster using kind
      shell: sed "s|PWD_PLACEHOLDER|$(pwd)|g" deployment/local/kind-config-template.yaml | kind create cluster --name 12factor --wait 30s --config=-

    - name: Set kubernetes context to kind-12factor cluster context
      command: kubectl cluster-info --context kind-12factor

    - name: Build docker image
      command: docker build -t todo-api todo-api/src

    - name: Build test docker image
      command: docker build -t todo-api-job todo-api/tests

    - name: Push docker images to kind
      command: kind --name 12factor load docker-image todo-api todo-api-job

    - name: Apply namespace configuration
      k8s:
        state: present
        src: deployment/local/12factor-namespace.yaml

    - name: Set current namespace context
      shell: kubectl config set-context --current --namespace=12factor

    - name: Create ConfigMap from env file
      shell: kubectl create configmap todo-api-config --from-env-file=local.env

    - name: Create Secret from env file
      shell: kubectl create secret generic todo-api-secret --from-env-file=local.secret.env

    - name: Apply Kubernetes configurations
      k8s:
        state: present
        namespace: 12factor
        src: "{{ item }}"
      loop:
        - deployment/local/todo-api-db-volume-claim.yaml
        - deployment/local/todo-api-db-deployment.yaml
        - deployment/local/todo-api-db-service.yaml
        - deployment/local/todo-api-deployment.yaml
        - deployment/local/todo-api-service.yaml

    - name: Pause for 10 seconds
      pause:
        seconds: 10

    - name: Run migrations
      shell: ./execute.sh src/manage.py migrate

    - name: Run tests
      shell: ./execute.sh -m pytest
